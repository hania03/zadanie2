name: Build and Publish Docker Image

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Docker image
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 -t my-image .

      - name: Install Docker Scout
        run: |
          curl -fsSL https://docker-scout.readthedocs.io/install.sh | sh

      - name: Test image for vulnerabilities
        run: |
          echo "Running vulnerability scan..."
          docker-scout scan my-image

      - name: Check vulnerability scan results
        run: |
          # Use a script or command to check vulnerability scan results
          # If no high vulnerabilities found, proceed with image publishing
          # If high vulnerabilities found, exit with a non-zero code

      - name: Create and run vulnerability check script
        run: |
          # Create a script file with the vulnerability check logic
          echo '#!/bin/bash' > vulnerability-check.sh
          echo 'docker-scout scan my-image > scan-results.txt' >> vulnerability-check.sh
          echo 'if grep -q "high" scan-results.txt; then' >> vulnerability-check.sh
          echo '  echo "High vulnerabilities found. Aborting image publishing."' >> vulnerability-check.sh
          echo '  exit 1' >> vulnerability-check.sh
          echo 'else' >> vulnerability-check.sh
          echo '  echo "No high vulnerabilities found. Proceeding with image publishing."' >> vulnerability-check.sh
          echo '  exit 0' >> vulnerability-check.sh
          echo 'fi' >> vulnerability-check.sh

          # Make the script executable
          chmod +x vulnerability-check.sh

          # Execute the script
          ./vulnerability-check.sh

      - name: Publish Docker image to GitHub Packages
        if: success()
        run: |
          echo "$CR_PAT" | docker login ghcr.io -u USERNAME --password-stdin
          docker tag my-image ghcr.io/USERNAME/my-image:latest
          docker push ghcr.io/USERNAME/my-image:latest
